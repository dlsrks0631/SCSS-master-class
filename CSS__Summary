<<<<<<<<<< Flexbox >>>>>>>>>>

-> 부모가 아닌 하나의 자식에게 적용
-> align-self - 자식 하나만 선택하여 align-items역할을 수행할 수 있음
-> order - html에서 순서를 바꿀 수 없을 경우 사용
(ex) -> 현재 div들의 order은 0으로 되어있기 때문에 order: 1인 div2가 맨 마지막으로 간다.
div1 div2 div3 --> div1 div3 div2

div2 {
    order: 1;
}

-> flex-direction: row-reverse - 맨 끝부터 시작하므로 오른쪽 끝이 flex-start임

-> align-content (line을 변경, line은 cross-axis에 있는 상태)
- justify-content와 비슷하지만 'line'에 관한 것 (각 block이 여러 행에 걸쳐 나올 때, 행간 공백을 얼마나 둘 건지?)
- align-content: flex-start // align-content: space-around - 줄 사이 공간 - content의 줄을 바꾼다

-> flex-shrink - child 에게 줄 수 있는 기능(기본값 1)
(ex)
div1 div2 div3
div2 {
    flex-shrink: 2;
    --> flex-wrap: nowrap인 상태에서 두 번째 박스인 div2는 창 크기가 줄어들 때,
                    div1과 div3보다 2배 더 줄어들 것이다.
}

-> flex-grow - child 에게 줄 수 있는 기능(기본값 0)
- property가 0인 상태거나, 따로 정의되지 않았다면, 화면이 커져도 각 element 크기가 커지지 않음. 여백만 늘어나게 됨

(ex)
div1 div2 div3
div2 {
    flex-grow: 1
    --> div2가 커질 수 있을 만큼 커짐
}

-> flex-basis - child에게 적용되는 기능
- shirnk, grow되기 전 element에게 처음 크기를 주는 것
- flex-shrink 와 flex-grow 를 위한 기본 세팅
- main axis(주축) 쪽 크기를 정해준다. 즉, flex-direction이 row(default)일 때는 width와 같이 작용, column일 때는 height와 같이 작용

-> Flex-wrap 
flexbox --> 너비를 신경쓰지 않음. 너비를 바뀌더라도 아이템들을 모두 같은 줄에 있도록 유지시킴.
flex-wrap: nowrap --> 기본값 - 너비 신경 X
flex-wrap: wrap --> 자식의 크기를 유지시킴

-> flex-flow
(ex)
flex-flow: row wrap -> flex-direction과 wrap을 같이 선언


<<<<<<<<<< Grid >>>>>>>>>>

-> display: grid;
== grid-template-columns: 250px 250px 등등 -> 원하는 column의 크기를 적어주면 됨(열의 가로길이)
== grid-template-rows: px px -> 원하는 row의 크기를 적어주면 됨(행의 세로길이)

-> gap
== column-gap || row-gap || gap 사용 가능
== row-gap: 10px -> 각 행들 사이에 10px의 공간을 주기
== column-gap: 10px -> 각 열들 사이에 10px의 공간을 주기

-> grid-template-columns: 200px 200px 200px;
== grid-template-columns: repeat(3,200px);

-> grid-template-areas
(ex) 
.grid{  
  grid-template-areas:
    "header header header header"
    "content content content nav"
    "content content content nav"
    "footer footer footer footer";
}

grid-area: header || content || nav || footer --> 명시해줘야 함

== grid-template-areas 조건
1. grid 내부에 grid-area의 영역이 전부 이어져 있는가? 
(ex: header 영역이 둘로 쪼개져 있고 그러면 안됨.)
2. grid 내부에 grid-area의 영역이 직사각형인가? 
(ex: header 영역이 ㄴ자 ㄱ자 등이어도 안됨.)

.header {
  background-color: #2ecc71;
  grid-area: header --> grid 이름을 지정해줌
}
.content {
  background-color: #3498db;
  grid-area: content;
}
.nav {
  background-color: #8e44ad;
  grid-area: nav;
}
.footer {
  background-color: #f39c12;
  grid-area: footer;
}

-> grid-column-start || grid-column-end
== grid-column: (start) / (end);
== grid-row: (start) / (end);
-1, -2, -3, ··· -> 끝에서부터 line 세기
(start) / span (cell 수) -> 시작점과 끝점을 적는걸 대신한다.

-> grid-column: span 원하는 셀수
== grid-column: 시작점 / span 원하는 셀수로도 응용 가능



-> repeat()
Grid 내부의 셀의 길이를 지정할 때 사용
예를 들어 12개의 길이가 같은 열을 만들고 싶다면

(ex) --> 창의 길이가 줄면 같이 줄어들게 된다.
.grid {
  display: grid;
  grid-template-columns: repeat(12,1fr);
}

-> minmax()
- 최소 길이를 지정해 줄 수 있는 함수
(ex)
.grid {
  display: grid;
  grid-template-columns: repeat(12,minmax(250px,1fr));
}
--- 전체 너비가 줄어들더라도 셀의 너비가 250px 이하로는 작아지지 않는다.

-> auto-fill / auto-fit
- repeat() 함수와 함께 사용
- repeat() 함수의 파라미터로 열 또는 행의 개수를 미리 지정해 주지 않고, 
  설정된 너비가 허용하는 한 최대한 셀을 채우게 된다.

(ex)
    <div class="grid">
      <div class="boxes">1</div>
      <div class="boxes">2</div>
      <div class="boxes">3</div>
      <div class="boxes">4</div>
      <div class="boxes">5</div>
    </div>

    .grid {
      display: grid;
      grid-gap: 10px;
      grid-auto-rows: 100px;
      margin-bottom: 30px;
    }
  -> 창이 작을 시엔 auto-fit과 auto-fill 차이가 없지만
  -> auto-fill은 설정된 너비에서 가능한 많은 셀들을 만들어 내려고 한다.
      겉으로 보기에는 빈 공간이 있더라도 셀의 길이를 늘리지 않는다.
  -> auto-fit은 빈 공간을 셀들이 나누어 가져서 딱 맞게 길이를 설정한다.
      겉으로 보기에는 셀의 길이를 전체 너비에 맞게 늘린다.
